#input -> an array of numbers (integers)
#output -> an array of integers  sorted by the  alphabetical name of the numbers 

#Algorithm
# initialize an array of number_words -- the index of this aray matches the index of the integer array
# you can use the sort_by method which sorts the original array by maping values in the original block to a tuple generated by 
# mapping values through the given block
# Additionally using #Enum.sort; you can sort the original array by calling sort and then comparing each value at the index of each element
# of the number words constant.

NUMBER_WORDS = %w(zero one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen \
                  sixteen seventeen eighteen nineteen)

def alphabetic_number_sort(arr)
  p sorted = arr.sort { |num1, num2| NUMBER_WORDS[num1] <=> NUMBER_WORDS[num2]}
end

#or

# => this creates a tuple by mapping the array and  NUMBER_WORDS variable into a tuple for key value pairs
# => NUMBER_WORDS is then sorted and the index is returned
# => The original array is sorted 


def alphabetic_number_sort(arr)
  p sorted = arr.sort_by { |number| NUMBER_WORDS[number] } 
end

alphabetic_number_sort((0..19).to_a) == [
    8, 18, 11, 15, 5, 4, 14, 9, 19, 1, 7, 17,
    6, 16, 10, 13, 3, 12, 2, 0
  ]


p NUMBER_WORDS.sort!